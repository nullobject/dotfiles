module Autotest::Growl
  ICON_DIR = '~/Library/Icons/autotest'
  NUM_FAIL_ICONS = 5

  def self.growl(title, msg, img, pri=0, sticky='')
    system "growlnotify -n autotest --image #{img} -p #{pri} -m #{msg.inspect} #{title} #{sticky}"
    nil
  end

  def self.parse_results(results)
    output = results.slice(/(\d+)\sexamples?,\s(\d+)\sfailures?/)
    examples = $~[1].to_i
    failures = $~[2].to_i
    [output, examples, failures]
  end

  Autotest.add_hook :red do |at|
    output, examples, failures = parse_results(at.results)
    if examples > 0 && failures > 0
      cnt = [(failures.to_f / examples.to_f * NUM_FAIL_ICONS).ceil, NUM_FAIL_ICONS].min
      growl('Tests Failed', output, ICON_DIR + "/fail#{cnt}.png", 2)
    end
  end

  Autotest.add_hook :green do |at|
    output, examples, failures = parse_results(at.results)
    growl('Tests Passed', output, ICON_DIR + '/pass.png', 1)
  end

  Autotest.add_hook :initialize do |at|
    at.add_exception(/\.log/)
  end 
end

Autotest.add_hook :initialize do |at|
  unless ARGV.empty?
    paths = ARGV
    paths |= paths.map do |path|
      path = path.dup
      unless path =~ /^spec/
        if path =~ /^app/
          path.sub!(/^\w+/, 'spec') 
        else
          path = 'spec/' + path
        end
        path.sub!(/\.rb$/, '_spec.rb')
      end
      path
    end
    at.find_directories = paths
  end
end
